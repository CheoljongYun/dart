void main() {

  //동적인 언어(타입 X)
  //var value = 123;
  //정적인 언어(타입 O)
  
  int value2 = 123;

  //dart는 둘다... 보통 정적인 언어처럼 사용, 동적인 언어 사용하지 않는다
  
  // Class 클래스: OOP 객체지향(추상화) - 함수형 프로그래밍(모든 내용을 함수로 짠다)
  
  // 1. 변수
  // 왜 쓰는가: 내가 쓰고 있는 값을 저장하기 위해
  // 무조건 X, 다시 쓰고 싶을 때, 이름으로 공간을 만들어놓고 바꿔가면서 쓰고 싶을 때 사용
  // 작성 방법: <보관하고 싶은 값의 타입> <변수명> <대입연산자(=)> <값> <;>
  
  int a = 1; // 변수의 초기화(선언). 전역 변수
  a = 123; // 변수의 값 바꾸기 = 할당(재할당, 초기화(공간만 만들어 놓고 그 다음 값을 넣었을 때))
  a; //변수 메모리에 잡아놓기
  print(a); // 출력하기
  
  // = 대입연산자: 등호
  
  int b = 2;
  a = b;
  b = 3;
  
  // a : 2
  // b : 3
  // 코드는 한 줄씩 실행되므로 덮어쓰기 하면 없어진다
  
  // 지역 변수와 전역 변수 - 상대적인 개념. 중괄호 기준으로 나뉨
  // {}: 실행 범위 - dict, Map, Set 등과 헷갈리지 말 것 / {}, Func{}, Class{} 등 사용 가능(실행 범위로서)
  
  {
    int c = 3; //int a, b에 대한 지역 변수면서 int d에 대한 전역 변수
    print(a);
    print(c);
    {
      int d = 4; //지역 변수
      // a, b, c, d 변수 다 사용 가능
    }
    //a, b, c 변수 사용 가능
  }
  // a, b 변수 사용 가능: 중괄호 닫음과 함께 int c 값 컴퓨터에서 사라짐
  {
    print(a);
    int e = 5;  //int c와 같은 레벨 선상의 값, 같은 지역 변수
    print(e);
  }
  
  int vv = 0;
  
  {
    int v1 = 0;
    print(v1);
    print(vv);
  }
  {
    int v1 = 0;
    print(v1 );
    print(vv);
  }
  
  //무수한 변수들 . . . int vv 열어뒀던 중괄호 닫힐 때까지는 계속 메모리를 잡아먹는다
 
  print(a); //
  // print(c); 오류 난다
  
  // 함수
  // 왜 쓰나요: 수식/공식 - 순수 함수, 중괄호 범위를 묶어서 가져다 쓰기 위해서. 반복/중복 제거
  // 작성 방법 *만들고 쓴다
  // <결괏값 타입> <함수 이름(인자)> <{연산, 로직 등} - 위의 중괄호와 동일>
  // <결괏값 타입> <함수 이름(인자)> <=> 값/식> <;>
  
  // 선언부, 생성부
  int func(){
    // return 전 처리해야 하는 모든 것 입력
    return 123; //return 코드 입력하면 종료
    // 작성해도 출력 안 됨
  }
  
  // 실행부, 호출, 호출부
  // <함수 이름(인자의 값, 없을 시 생략);>
  print(func());
  
  int funcvalue = func();
  print(funcvalue);
  
  int func2(int x){
    return x+1;
  }
  
  print(func2(123));
  //반드시 인자 적기, 안 쓰면 오류 난다
  
  int func3(int x, int y){
    return x+y;
  }
  
  print(func3(1, 2));
  //반드시 모든 인자 "순서대로" 적기(순서에 의존), 안 쓰면 오류 난다

  //인자가 많이 필요해서 다 암기하기 힘들어질 경우 - 네이밍 옵션
  
  int func4({int x = 0, int y = 0}){
    return x+y+1;
  }
  
  print(func4(y:12, x:1));
  // 1. 기본값이 있으므로 인자를 적지 않아도 된다 넣어도 되고 안 넣어도 되고 넣고 싶은 것만 넣어도 되고 -> 코드상의 오류는 없다
  // 2. 순서 상관 없이 값을 넣고 싶을 때 "이름:인자" 넣으면 된다
  // 3. 네이밍옵션이 있는 경우는 변수 이름을 적어줘야 한다
  
  //무조건 x를 쓰도록 하는 방법: 네이밍 옵션 적용한 것과 적용하지 않은 것을 섞기
  int func5(int x,{int y = 0}){
    return x+2;
  }
  
  print(func5(1));
  
  //required: 필요한 부분마다 각각 앞에 붙여주기. 필수 인자로 넣어야 해서 기본값 쓸 수 없음
  int func6({required int x, int y=0}) => x+2;

  print(func6(x:98));
  
  int ele = 123; //전역 변수
  
  int eleFunc(int ele){ //전역 변수보다 안전빵: 인자로 변수 받아놓기
    // int ele = 333; //지역 변수
    return ele+2; //실행 범위 내에서 가장 가까운 변수를 인식한다 - > result: 335 출력
  }
  
  int result = eleFunc(ele);
  
  print("result: $result"); //$:변수에 들어가는 값(예:숫자)를 문자열로 바꿔줌. 문자열 안에서만 사용 가능
  

  
} //vv 날아감
